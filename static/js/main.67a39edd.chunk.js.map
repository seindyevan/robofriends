{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","props","onClick","PureComponent","Header","className","Component","SearchBox","searchfield","searchChange","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","map","user","i","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","r","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67a39edd.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\n\nclass CounterButton extends PureComponent{\n    constructor(){\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        if(this.state.count != nextState.count){\n            return true;\n        } else{\n            return false;\n        }\n\n    }\n\n    updateCount = () => {\n        this.setState( (state) => {\n          return { count: state.count + 1}\n        });\n    }\n\n    render(){\n        console.log('Counter button')\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n\n        )\n    }\n}\n\nexport default CounterButton;","import React, {Component} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component{\n\n    // shouldComponentUpdate(nextProps, nextState){\n    //     return false;\n    // }\n\n    render(){\n        return(\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'}/>\n            </div>\n        ) \n    }\n}\n\nexport default Header;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    return(\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key={i}\n                            id={user.id} \n                            name={user.name}  \n                            email={user.email}/>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n    \n\n    componentDidCatch(error, info){\n        this.setState({\n            hasError: true\n        });\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oooops... this is not good</h1>\n        } \n        return this.props.children;\n    }\n}\n\n\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","//import React, {useState, useEffect} from 'react';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n//import { robots_data } from '../robots';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport { requestRobots, setSearchField } from '../actions'\n\n\nconst mapStateToProps = (state) =>{\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\n//function App(props){\nclass App extends Component {\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    //const [robots, setRobots] = useState([]);\n \n    // const [searchField, setSearchField] = useState('');\n\n    // useEffect(() => {\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //         .then(response => response.json())\n    //         .then(users => setRobots(users))\n    // }, []);\n\n    \n    // const onSearchChange = (e) => {\n    //     setSearchField(e.currentTarget.value);\n    // }\n\n    // const filteredRobots = robots.filter(r => {\n    //     return r.name.toLowerCase().includes(searchField.toLowerCase())\n    // });\n\n\n  \n\n    render() {\n        const { searchField, onSearchChange, robots, isPending} = this.props;\n\n        const filteredRobots = robots.filter(r => {\n            return r.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n\n        \n        //return !robots.length ? <h1>Loading</h1> :\n        return isPending ? <h1>Loading</h1> :\n        (\n\n            <div className='tc'>\n                {/* <h1>RoboFriends</h1> */}\n                <Header/>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n            \n        )\n    }\n  \n\n}\n\n//higher order componentt\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD, \n    payload: text\n})\n\n\n//higher order\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => {\n            return dispatch({\n                type: REQUEST_ROBOTS_SUCCESS,\n                payload: data\n            })\n        })\n        .catch(error => {\n            return dispatch({\n                type: REQUEST_ROBOTS_FAILED,\n                payload: error\n            })\n        });\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {\n                        searchField: action.payload\n            });\n            //return { ...state, searchField: action.payload }\n\n        default: \n            return state;\n       \n    }\n}\n\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {\n                isPending: true\n            });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {\n                robots: action.payload, \n                isPending: false\n            });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {\n                error: action.payload,\n                isPending: false\n            });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport {Provider} from 'react-redux'\nimport { searchRobots, requestRobots } from './reducers';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n\n//create store(rootReducer) --> as there will be many reducer in large scale application\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({\n  searchRobots, \n  requestRobots\n});\n\n//applymiddleware () -> ordered\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>  \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}